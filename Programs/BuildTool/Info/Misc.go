// Copyright 2024 mzoesch. All rights reserved.

package Info

import (
    "Jafg/Shared"
    "fmt"
    "os"
    "strings"
)

var GeneratedFileStub string = `
// Copyright mzoesch. All rights reserved.

/*-----------------------------------------------------------------------------
    This file was generated by the Jafg build tool.
    Do not modify it manually.
-----------------------------------------------------------------------------*/
`

func GetShortNameFromGeneratedHeaderFile(file *os.File) string {
    var name string = file.Name()
    if strings.Contains(name, "\\") {
        name = strings.ReplaceAll(name, "\\", "/")
    }

    var start int = strings.LastIndex(name, "/") + 1
    var end int = strings.LastIndex(name, Shared.GeneratedHeaderExtension)
    return name[start:end]
}

func GetHeaderGuard(projectName string, shortFileName string) string {
    return fmt.Sprintf(`
#ifdef PRIVATE_JAFG_%s_%s_GENERATED_HEADER
#error "Generated header from %s-file inside project %s already exists. Missing #ifndef or #pragma once directive?"
#endif /* PRIVATE_JAFG_%s_%s_GENERATED_HEADER */
#define PRIVATE_JAFG_%s_%s_GENERATED_HEADER
`,
        projectName, shortFileName,
        shortFileName, projectName,
        projectName, shortFileName,
        projectName, shortFileName,
    )
}

func GetHeaderGuardNoProject(shortFileName string) string {
    return fmt.Sprintf(`
#ifdef PRIVATE_JAFG_%s_GENERATED_HEADER
#error "Generated header from %s-file already exists. Missing #ifndef or #pragma once directive?"
#endif /* PRIVATE_JAFG_%s_GENERATED_HEADER */
#define PRIVATE_JAFG_%s_GENERATED_HEADER
`,
        shortFileName,
        shortFileName,
        shortFileName,
        shortFileName,
    )
}

func WriteHeaderContent(file *os.File, bDoHeaderGuard bool, bIsHeaderGuardProjectSpecific  bool, content string) {
    if GProjectBuildInfo == nil {
        panic("GProjectBuildInfo is nil")
    }

    var shortFileName string = GetShortNameFromGeneratedHeaderFile(file)

    var headerGuard string = ""
    if bDoHeaderGuard {
        if bIsHeaderGuardProjectSpecific {
            headerGuard = GetHeaderGuard(GProjectBuildInfo.ProjectName, shortFileName)
        } else {
            headerGuard = GetHeaderGuardNoProject(shortFileName)
        }
    }

    var header string = fmt.Sprintf(`
%s
%s
%s
`,
        GeneratedFileStub,
        headerGuard,
        content,
    )

    Shared.WriteToFile(file, header)

    return
}
