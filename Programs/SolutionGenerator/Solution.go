// Copyright 2024 mzoesch. All rights reserved.

package SolutionGenerator

import (
    "Jafg/Shared"
    "fmt"
    "os"
    "strings"
)

func CleanSolution() {
    if _, err := os.Stat(Shared.FullSolutionLuaPath()); !os.IsNotExist(err) {
        err := os.Remove(Shared.FullSolutionLuaPath())
        if err != nil {
            panic(err)
        }
    }

    if _, err := os.Stat(Shared.GApp.GetEngineRootDir() + "/Jafg.sln"); !os.IsNotExist(err) {
        err := os.Remove(Shared.GApp.GetEngineRootDir() + "/Jafg.sln")
        if err != nil {
            panic(err)
        }
    }

    for _, proj := range Shared.GApp.Projects {
        var targetedGeneratedFile string = proj.GetAbsoluteDirPath() + "/" + proj.Name + ".vcxproj"
        if _, err := os.Stat(targetedGeneratedFile); !os.IsNotExist(err) {
            err := os.Remove(targetedGeneratedFile)
            if err != nil {
                panic(err)
            }
        }
    }

    return
}

func GenerateSolution() {
    PrepareBuildLua()
    WriteWorkspace()

    return
}

func PrepareBuildLua() {
    fmt.Println("Preparing build.lua")

    if _, err := os.Stat(Shared.FullSolutionLuaPath()); os.IsNotExist(err) {
        file, err := os.Create(Shared.FullSolutionLuaPath())
        if err != nil {
            panic(err)
        }
        err = file.Close()
        if err != nil {
            panic(err)
        }
    }

    file, err := os.OpenFile(Shared.FullSolutionLuaPath(), os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666)
    if err != nil {
        panic(err)
    }

    _, err = file.WriteString(
        "-- Copyright 2024 mzoesch. All rights reserved.\n" +
            "-- This file is automatically generated by Jafg and can be deleted with no fear.\n\n")
    if err != nil {
        panic(err)
    }

    err = file.Close()
    if err != nil {
        panic(err)
    }

    return
}
func WriteWorkspace() {
    fmt.Println("Writing workspace")

    file, err := os.OpenFile(Shared.FullSolutionLuaPath(), os.O_APPEND|os.O_RDWR|os.O_CREATE, 0666)
    if err != nil {
        panic(err)
    }

    _, err = file.WriteString(MakeBuildLuaContent() + "\n")
    if err != nil {
        panic(err)
    }

    err = file.Close()
    if err != nil {
        panic(err)
    }

    return
}

func MakeBuildLuaContent() string {
    var builder strings.Builder = strings.Builder{}

    builder.WriteString("language 'C++'\n")
    builder.WriteString("cppdialect 'C++20'\n")

    builder.WriteString("workspace 'Jafg'\n")
    builder.WriteString("    architecture 'x64'\n")
    builder.WriteString("    startproject 'Runtime'\n")
    builder.WriteString("    configurations { 'Debug', 'Development', 'Shipping' }\n")
    builder.WriteString("    platforms { 'Client', 'Server' }\n")

    for _, proj := range Shared.GApp.Projects {
        builder.WriteString(fmt.Sprintf("group '%s'\n", proj.Name))
        builder.WriteString(fmt.Sprintf("project '%s'\n", proj.Name))
        builder.WriteString(fmt.Sprintf("    location '%s'\n", proj.Name))
        builder.WriteString(fmt.Sprintf("    kind '%s'\n", proj.Kind.ToLuaString()))

        builder.WriteString("group ''\n")
    }

    return builder.String()
}
